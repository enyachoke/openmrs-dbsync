<routes xmlns="http://camel.apache.org/schema/spring">

    <route id="sender-db-sync" errorHandlerRef="watcherErrorHandler">
        <from uri="direct:sender-db-sync" />

        <log message="Start: ${routeId}" loggingLevel="DEBUG" />

        <choice>
            <when>
                <simple>${exchangeProperty.event.operation} == 'd'</simple>
                <setBody>
                    <spel>#{new org.openmrs.eip.dbsync.model.SyncModel()}</spel>
                </setBody>
                <script>
                    <spel>
                        #{body.setTableToSyncModelClass(T(org.openmrs.eip.dbsync.service.TableToSyncEnum).getTableToSyncEnum(getProperty('event').tableName).modelClass)}
                        #{body.setModel(body.tableToSyncModelClass.getConstructor().newInstance())}
                        #{body.model.setUuid(getProperty('event').identifier)}
                        #{body.setMetadata(new org.openmrs.eip.dbsync.model.SyncMetadata())}
                    </spel>
                </script>

                <log message="Deleted entity payload -> ${body}" />
            </when>
            <otherwise>
                <log message="Loading entity from DB..." loggingLevel="DEBUG" />

                <toD uri="openmrs:extract?tableToSync=${exchangeProperty.event.tableName.toUpperCase()}&amp;uuid=${exchangeProperty.event.identifier}" />

                <log loggingLevel="DEBUG" message="Loaded entity -> ${body}" />

                <choice>
                    <when>
                        <simple>${body.size()} == 1</simple>
                        <setBody>
                            <jsonpath>$[0]</jsonpath>
                        </setBody>
                    </when>
                    <!-- TODO fail if multiple entities are found -->
                    <otherwise>
                        <setBody>
                            <simple>${null}</simple>
                        </setBody>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>

        <choice>
            <when>
                <simple>${body} != null</simple>
                <setProperty name="shouldProcess">
                    <constant>true</constant>
                </setProperty>

                <!-- TODO Change this check after we start saving previous and new row state as part of the sender
                retry item to use the states instead of the loaded entity from the DB -->
                <when>
                    <simple>${exchangeProperty.event.tableName} == 'datafilter_entity_basis_map' &amp;&amp; ${exchangeProperty.event.operation} != 'd'</simple>
                    <setProperty name="shouldProcess">
                        <method beanType="org.openmrs.eip.dbsync.utils.SyncUtils" method="isEntitySynced(${body.model})" />
                    </setProperty>
                </when>

                <choice>
                    <when>
                        <simple>${exchangeProperty.shouldProcess} == true</simple>
                        <script>
                            <spel>
                                #{body.metadata.setSourceIdentifier('{{db-sync.senderId}}')}
                                #{body.metadata.setDateSent(T(java.time.LocalDateTime).now())}
                                #{body.metadata.setOperation(getProperty('event').operation)}
                            </spel>
                        </script>
                        <setBody>
                            <method beanType="org.openmrs.eip.dbsync.utils.JsonUtils" method="marshall(${body})" />
                        </setBody>

                        <log loggingLevel="DEBUG" message="Sync payload -> ${body}" />

                        <when>
                            <simple>{{openmrs.eip.dbsync.encryption.enabled}} == true</simple>
                            <log message="Encrypting entity payload.." />

                            <process ref="pgpEncryptService" />

                            <log message="Encrypted entity payload -> ${body}" loggingLevel="TRACE" />
                        </when>

                        <log message="Sending entity payload to sync destination: {{camel.output.endpoint}}" />

                        <toD uri="{{camel.output.endpoint}}" />

                        <log message="Entity payload sent" />
                    </when>
                    <otherwise>
                        <log message="Skipping EntityBasisMap event for an entity of a type that is not synced" />
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <!-- TODO Log to a special failures log file or DB -->
                <log message="No entity found in the database matching identifier: ${exchangeProperty.event.identifier}" loggingLevel="ERROR" />
            </otherwise>
        </choice>

        <log message="End: ${routeId}" loggingLevel="DEBUG" />

    </route>

</routes>
